// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NESTJS_DATABASE_URL")
}

model Admin {
  id              String    @id @default(uuid())
  email           String    @unique
  password        String
  name            String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  deletedAt       DateTime?
  createdPayments Payment[]
}

model Client {
  id                 String    @id @default(uuid())
  name               String
  lastName           String
  phone              String[]
  physicalAddress    String?
  referenceAddresses String[]
  paymentDay         Int
  payments           Payment[]
  anthenas           Anthena[]
}

// TODO Agregar historial de instalaciones

model Payment {
  id             String       @id @default(uuid())
  details        String?
  Client         Client?      @relation(fields: [clientId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  clientId       String?
  SubPayments    SubPayment[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  Receipts       Receipt[]
  CreatorAdmin   Admin?       @relation(fields: [creatorAdminId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  creatorAdminId String?
}

model SubPayment {
  id        String   @id @default(uuid())
  startDate DateTime @db.Date
  endDate   DateTime @db.Date
  amount    Decimal  @db.Decimal(6, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Payment   Payment? @relation(fields: [paymentId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  paymentId String?
}

model Receipt {
  id        Int      @id @default(autoincrement())
  payment   Payment  @relation(fields: [paymentId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  paymentId String
  fileUrl   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model IpAdress {
  id                 Int      @id @default(autoincrement())
  fullIp             String   @unique
  firstPart          Int
  secondPart         Int
  range              Int
  tail               Int
  predecessorAnthena Anthena? @relation("PredecessorAnthena")
  parentAnthena      Anthena? @relation("ParentAnthena", fields: [parentAnthenaId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  parentAnthenaId    String?

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Anthena {
  id        String    @id @default(uuid())
  name      String
  alias     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  mainIpAdressId Int?      @unique
  mainIpAddress  IpAdress? @relation("PredecessorAnthena", fields: [mainIpAdressId], references: [id], onDelete: SetNull, onUpdate: Cascade)

  childrenIpAddresses IpAdress[] @relation("ParentAnthena")

  Client   Client? @relation(fields: [clientId], references: [id])
  clientId String?
}
